name: Chat Intake → Issue

on:
  workflow_dispatch:
    inputs:
      title:
        description: "Issue title"
        required: true
        type: string
      spec_json:
        description: "Spec JSON (paste your prompt spec)"
        required: true
        type: string
      labels_csv:
        description: "Comma labels (default: self-apply)"
        required: false
        default: "self-apply"
        type: string
  repository_dispatch:
    types: [chat_spec]  # optional API hook for future integrations

permissions:
  contents: read
  issues: write

jobs:
  create-issue:
    runs-on: ubuntu-latest
    steps:
      - name: From chat → open Issue with JSON spec
        uses: actions/github-script@v7
        env:
          TITLE:  ${{ inputs.title || github.event.client_payload.title }}
          SPEC:   ${{ inputs.spec_json || github.event.client_payload.spec_json }}
          LABELS: ${{ inputs.labels_csv || github.event.client_payload.labels_csv || 'self-apply' }}
        with:
          script: |
            const title  = process.env.TITLE?.trim() || 'Chat Spec';
            const spec   = process.env.SPEC?.trim()  || '{}';
            const labels = (process.env.LABELS || 'self-apply')
              .split(',').map(s => s.trim()).filter(Boolean);

            const body = [
              '### Source',
              '- Created via **Chat Intake → Issue**',
              '',
              '### Spec',
              '```json',
              spec,
              '```',
              '',
              '**Note:** Triage will plan, label `codegen:ready`, and dispatch Codegen automatically.'
            ].join('\n');

            const { data: issue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              title, body, labels
            });

            core.info(`Opened issue #${issue.number}: ${issue.html_url}`);
