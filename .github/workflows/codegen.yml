name: AI Codegen

on:
  # Manual run
  workflow_dispatch:
    inputs:
      issue_number:
        description: "Issue number to generate from"
        required: true
        type: number
  # Human labeling still works
  issues:
    types: [labeled]
  # Triage will trigger this explicitly
  repository_dispatch:
    types: [codegen]

permissions:
  contents: write
  pull-requests: write
  issues: write

concurrency:
  group: codegen-${{ github.event.issue.number || inputs.issue_number || github.event.client_payload.issue_number || github.run_id }}
  cancel-in-progress: true

jobs:
  codegen:
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'repository_dispatch' ||
      github.event.label.name == 'codegen:ready' ||
      contains(github.event.issue.labels.*.name, 'codegen:ready')
    runs-on: ubuntu-latest

    env:
      ISSUE_NO: ${{ github.event.issue.number || inputs.issue_number || github.event.client_payload.issue_number }}

    steps:
      - name: Debug event
        run: |
          echo "event_name=${{ github.event_name }}"
          echo "issue_from_event=${{ github.event.issue.number }}"
          echo "issue_from_input=${{ inputs.issue_number }}"
          echo "issue_from_dispatch=${{ github.event.client_payload.issue_number }}"
          echo "ISSUE_NO=${ISSUE_NO}"

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Validate runner files exist
        run: |
          test -f rocketgpt-agents/runners/github_actions.js || \
            (echo "Missing runner: rocketgpt-agents/runners/github_actions.js" && exit 1)

      - name: Ensure ISSUE_NO is set
        if: ${{ env.ISSUE_NO == '' }}
        run: |
          echo "ERROR: ISSUE_NO is empty. Pass 'issue_number' (manual) or dispatch with client_payload.issue_number."
          exit 1

      - name: Ensure 'codegen:ready' label on the Issue
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const issue_number = parseInt(process.env.ISSUE_NO, 10);
            const { data: issue } = await github.rest.issues.get({ owner, repo, issue_number });
            const has = (issue.labels || []).some(l => (typeof l === 'string' ? l : l.name) === 'codegen:ready');
            if (!has) await github.rest.issues.addLabels({ owner, repo, issue_number, labels: ['codegen:ready'] });

      - name: Pull Spec from Issue (with engine)
        id: spec
        uses: actions/github-script@v7
        env:
          DEFAULT_ENGINE: ${{ vars.DEFAULT_ENGINE }}
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const issue_number = parseInt(process.env.ISSUE_NO, 10);
            const { data: issue } = await github.rest.issues.get({ owner, repo, issue_number });
            const body = issue.body || '';
            const match = body.match(/```json([\s\S]*?)```/i);
            let obj = {};
            try { obj = match ? JSON.parse(match[1].trim()) : {}; }
            catch (e) { core.warning(`Failed to parse JSON: ${e.message}`); obj = {}; }
            const engine = (obj.engine || process.env.DEFAULT_ENGINE || 'openai').toString().trim().toLowerCase();
            core.setOutput('spec', JSON.stringify(obj));
            core.setOutput('title', issue.title || 'Untitled');
            core.setOutput('engine', engine);

      - name: Resolve engine (with safe fallback)
        id: engine
        uses: actions/github-script@v7
        env:
          DEFAULT_ENGINE: ${{ vars.DEFAULT_ENGINE }}
          OPENAI_API_KEY:     ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY:  ${{ secrets.ANTHROPIC_API_KEY }}
          GOOGLE_API_KEY:     ${{ secrets.GOOGLE_API_KEY }}
          GROQ_API_KEY:       ${{ secrets.GROQ_API_KEY }}
          SPEC_ENGINE:        ${{ steps.spec.outputs.engine }}
        with:
          script: |
            const request = (process.env.SPEC_ENGINE || process.env.DEFAULT_ENGINE || '').toLowerCase().trim();
            const providers = [
              { key: 'openai',    present: !!process.env.OPENAI_API_KEY },
              { key: 'anthropic', present: !!process.env.ANTHROPIC_API_KEY },
              { key: 'google',    present: !!process.env.GOOGLE_API_KEY },
              { key: 'groq',      present: !!process.env.GROQ_API_KEY },
            ];
            const chosen = (request && providers.some(p => p.key === request && p.present))
              ? request
              : (providers.find(p => p.present)?.key || 'openai');
            core.info(`Engine requested: "${request || '(none)'}" -> chosen: "${chosen}"`);
            core.setOutput('engine', chosen);

      - name: Generate Code (Planâ†’Codeâ†’Testsâ†’Docsâ†’Guard)
        env:
          MODEL_PROVIDER:     ${{ steps.engine.outputs.engine }}
          OPENAI_API_KEY:     ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY:  ${{ secrets.ANTHROPIC_API_KEY }}
          GOOGLE_API_KEY:     ${{ secrets.GOOGLE_API_KEY }}
          GROQ_API_KEY:       ${{ secrets.GROQ_API_KEY }}
          DRIVE_SVC_JSON:     ${{ secrets.DRIVE_SVC_JSON }}
          ISSUE_NO:           ${{ env.ISSUE_NO }}
        run: |
          echo "Selected provider: ${MODEL_PROVIDER}"
          echo '${{ steps.spec.outputs.spec }}' > spec.json
          node rocketgpt-agents/runners/github_actions.js code  spec.json
          node rocketgpt-agents/runners/github_actions.js test  spec.json
          node rocketgpt-agents/runners/github_actions.js doc   spec.json
          node rocketgpt-agents/runners/github_actions.js guard spec.json
          mkdir -p generated
          echo "Auto-generated for issue #${ISSUE_NO} on $GITHUB_REPOSITORY (engine=${MODEL_PROVIDER})" > generated/ai_test_${ISSUE_NO}.md

      - name: Build (JS + .NET)
        run: |
          if [ -f "./LicenseManager.sln" ]; then
            dotnet build ./LicenseManager.sln -c Release
          else
            echo "No .sln found, skipping .NET build."
          fi

      - name: Run Tests (if present)
        run: |
          if [ -f "./LicenseManager.sln" ]; then
            dotnet test ./LicenseManager.sln -c Release --logger "trx;LogFileName=test.trx"
          else
            echo "No .NET tests."
          fi

      - name: Configure Git author
        run: |
          git config --global user.name  "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Create Branch, Commit & Push
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NO: ${{ env.ISSUE_NO }}
        run: |
          BRANCH="ai/codegen/${ISSUE_NO}"
          if git ls-remote --exit-code --heads origin "$BRANCH" > /dev/null 2>&1; then
            git checkout "$BRANCH"
          else
            git checkout -b "$BRANCH"
          fi
          git add -A
          git commit -m "AI codegen for #${ISSUE_NO} (engine=${{ steps.engine.outputs.engine }}): ${{ steps.spec.outputs.title }}" || echo "No changes to commit."
          git push origin "$BRANCH"
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV

      - name: Open PR
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          base: main
          branch: ${{ env.BRANCH }}
          title: "AI Codegen: #${{ env.ISSUE_NO }} â€” ${{ steps.spec.outputs.title }} (engine=${{ steps.engine.outputs.engine }})"
          body: |
            ## ðŸ¤– What changed
            Generated code and tests from spec in #${{ env.ISSUE_NO }}.

            **Engine (chosen):** `${{ steps.engine.outputs.engine }}`
            **Routing hint:** `MODEL_PROVIDER=${{ steps.engine.outputs.engine }}`

            ## âœ… Checklist
            - [ ] Builds pass
            - [ ] Tests added & green
            - [ ] Security scan clean
            - [ ] Product acceptance met

            ### Artifacts
            - `generated/ai_test_${{ env.ISSUE_NO }}.md`
            - See commit diff for agent-written files.

      # âœ… This must be INSIDE the steps: block
      - name: Trigger Review via repository_dispatch
        if: ${{ steps.cpr.outputs.pull-request-number }}
        env:
          OWNER:  ${{ github.repository_owner }}
          REPO:   ${{ github.event.repository.name }}
          PR:     ${{ steps.cpr.outputs.pull-request-number }}
          GH_PAT: ${{ secrets.GH_PAT }}  # classic PAT with repo + workflow
        run: |
          set -e
          if [ -z "$GH_PAT" ]; then
            echo "ERROR: GH_PAT not set"; exit 1
          fi
          echo "Dispatching review for PR #${PR} on ${OWNER}/${REPO}â€¦"
          STATUS=$(curl -s -o /tmp/resp.json -w "%{http_code}" \
            -X POST \
            -H "Authorization: token ${GH_PAT}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${OWNER}/${REPO}/dispatches \
            -d "{\"event_type\":\"review\",\"client_payload\":{\"pr_number\":${PR}}}" )
          echo "Dispatch HTTP ${STATUS}"
          cat /tmp/resp.json || true
          test "${STATUS}" = "204" || (echo "ERR: dispatch failed"; exit 1)

      - name: Link PR in Issue (proof)
        if: ${{ steps.cpr.outputs.pull-request-number }}
        uses: actions/github-script@v7
        with:
          script: |
            const pr = `${{ steps.cpr.outputs['pull-request-url'] }}`;
            const issue_number = parseInt(process.env.ISSUE_NO, 10);
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number,
              body: `âœ… Codegen executed.\n\n- Engine: \`${{ steps.engine.outputs.engine }}\`\n- PR: ${pr}`
            });
