name: AI Codegen

on:
  issues:
    types: [labeled]

permissions:
  contents: write
  pull-requests: write
  issues: write

concurrency:
  group: codegen-${{ github.event.issue.number }}
  cancel-in-progress: true

jobs:
  codegen:
    if: contains(github.event.issue.labels.*.name, 'codegen:ready')
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      # Parse JSON spec from the issue body and extract `engine`
      - name: Pull Spec from Issue (with engine)
        id: spec
        uses: actions/github-script@v7
        env:
          DEFAULT_ENGINE: ${{ vars.DEFAULT_ENGINE }} # optional repo variable, e.g. "openai"
        with:
          script: |
            const issue = context.payload.issue;
            const body = issue.body || '';
            const match = body.match(/```json([\s\S]*?)```/i);
            let obj = {};
            try {
              obj = match ? JSON.parse(match[1].trim()) : {};
            } catch (e) {
              core.warning(`Failed to parse JSON from issue body: ${e.message}`);
              obj = {};
            }
            const engine =
              (obj.engine || process.env.DEFAULT_ENGINE || 'openai')
                .toString()
                .trim()
                .toLowerCase(); // openai|anthropic|google|groq

            core.setOutput('spec', JSON.stringify(obj));
            core.setOutput('title', issue.title || 'Untitled');
            core.setOutput('engine', engine);

      - name: Install (no external deps)
        run: echo "No npm deps required."

      - name: Resolve engine (with safe fallback)
        id: engine
        uses: actions/github-script@v7
        env:
          # optional repo variable; may be empty
          DEFAULT_ENGINE: ${{ vars.DEFAULT_ENGINE }}
          # masked env lets us test presence without leaking values
          OPENAI_API_KEY:     ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY:  ${{ secrets.ANTHROPIC_API_KEY }}
          GOOGLE_API_KEY:     ${{ secrets.GOOGLE_API_KEY }}
          GROQ_API_KEY:       ${{ secrets.GROQ_API_KEY }}
          SPEC_ENGINE:        ${{ steps.spec.outputs.engine }}   # from issue JSON if provided
        with:
          script: |
            const request = (process.env.SPEC_ENGINE || process.env.DEFAULT_ENGINE || '').toLowerCase().trim();
            const providers = [
              { key: 'openai',    present: !!process.env.OPENAI_API_KEY },
              { key: 'anthropic', present: !!process.env.ANTHROPIC_API_KEY },
              { key: 'google',    present: !!process.env.GOOGLE_API_KEY },
              { key: 'groq',      present: !!process.env.GROQ_API_KEY },
            ];

            function firstAvailable() {
              const p = providers.find(p => p.present);
              return p ? p.key : 'openai'; // final hard fallback
            }

            let chosen = request && providers.some(p => p.key === request && p.present) ? request : firstAvailable();

            core.info(`Engine requested: "${request || '(none)'}" -> chosen: "${chosen}"`);
            core.setOutput('engine', chosen);

      - name: Generate Code (Planâ†’Codeâ†’Testsâ†’Docsâ†’Guard)
        env:
          MODEL_PROVIDER:     ${{ steps.engine.outputs.engine }}
          OPENAI_API_KEY:     ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY:  ${{ secrets.ANTHROPIC_API_KEY }}
          GOOGLE_API_KEY:     ${{ secrets.GOOGLE_API_KEY }}
          GROQ_API_KEY:       ${{ secrets.GROQ_API_KEY }}
          DRIVE_SVC_JSON:     ${{ secrets.DRIVE_SVC_JSON }}
        run: |
          echo "Selected provider: ${MODEL_PROVIDER}"
          echo '${{ steps.spec.outputs.spec }}' > spec.json
          node rocketgpt-agents/runners/github_actions.js code  spec.json
          node rocketgpt-agents/runners/github_actions.js test  spec.json
          node rocketgpt-agents/runners/github_actions.js doc   spec.json
          node rocketgpt-agents/runners/github_actions.js guard spec.json

          # Always add a small, harmless artifact so the PR shows changes
          mkdir -p generated
          echo "Auto-generated for issue #${{ github.event.issue.number }} on $GITHUB_REPOSITORY (engine=${MODEL_PROVIDER})" \
            > generated/ai_test_${{ github.event.issue.number }}.md

      - name: Build (JS + .NET)
        run: |
          echo "Running dotnet build (if solution present)"
          if [ -f "./LicenseManager.sln" ]; then
            dotnet build ./LicenseManager.sln -c Release
          else
            echo "No .sln found, skipping."
          fi

      - name: Run Tests (if present)
        run: |
          if [ -f "./LicenseManager.sln" ]; then
            dotnet test ./LicenseManager.sln -c Release --logger "trx;LogFileName=test.trx"
          else
            echo "No tests, skipping."
          fi

      # Fix: set committer identity before committing
      - name: Configure Git author
        run: |
          git config --global user.name  "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Create Branch, Commit & Push
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BRANCH="ai/codegen/${{ github.event.issue.number }}"
          if git ls-remote --exit-code --heads origin "$BRANCH" > /dev/null 2>&1; then
            git checkout "$BRANCH"
          else
            git checkout -b "$BRANCH"
          fi
          git add -A
          git commit -m "AI codegen for #${{ github.event.issue.number }} (engine=${{ steps.engine.outputs.engine }}): ${{ steps.spec.outputs.title }}"
          git push origin "$BRANCH"
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV

      - name: Open PR
        uses: peter-evans/create-pull-request@v6
        with:
          base: main
          branch: ${{ env.BRANCH }}
          title: "AI Codegen: ${{ steps.spec.outputs.title }} (engine=${{ steps.engine.outputs.engine }})"
          body: |
            ## ðŸ¤– What changed
            Generated code and tests from spec in #${{ github.event.issue.number }}.

            **Engine (chosen):** `${{ steps.engine.outputs.engine }}`  
            **Routing hint:** `MODEL_PROVIDER=${{ steps.engine.outputs.engine }}`

            ## âœ… Checklist
            - [ ] Builds pass
            - [ ] Tests added & green
            - [ ] Security scan clean
            - [ ] Product acceptance met

            ### Artifacts
            - `generated/ai_test_${{ github.event.issue.number }}.md`
            - See commit diff for agent-written files.
