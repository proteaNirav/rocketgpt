name: RocketGPT Review Pipeline

on:
  pull_request:
    branches: [ main, dev ]
  repository_dispatch:
    types: [review] # allows Codegen to explicitly trigger review

permissions:
  contents: read
  pull-requests: write   # to comment on PR
  checks: write          # to create the "AI Review" check run
  statuses: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  MIN_ACCEPT_SCORE: 75

jobs:
  ai-review:
    name: AI Review
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Log event payload (review)
        run: |
          echo '${{ toJson(github.event) }}' > event.json
          jq -C '.' event.json || cat event.json

      - name: Determine PR number
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            let prNumber = null;
            if (context.eventName === 'pull_request') {
              prNumber = context.payload.pull_request.number;
            } else if (context.eventName === 'repository_dispatch') {
              prNumber = context.payload.client_payload?.pr_number ?? null;
            }
            if (!prNumber) {
              core.setFailed('PR number not found in event payload.');
            } else {
              core.setOutput('number', prNumber);
            }

      - name: Validate runner exists
        run: |
          test -f rocketgpt-agents/runners/github_actions.js || \
            (echo "Missing runner: rocketgpt-agents/runners/github_actions.js"; exit 1)

           - name: Pick model provider
        id: engine
        uses: actions/github-script@v7
        env:
          DEFAULT_ENGINE: anthropic        # ← prefer Claude for REVIEW
          OPENAI_API_KEY:     ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY:  ${{ secrets.ANTHROPIC_API_KEY }}
          GOOGLE_API_KEY:     ${{ secrets.GOOGLE_API_KEY }}
          GROQ_API_KEY:       ${{ secrets.GROQ_API_KEY }}
        with:
          script: |
            const req = (process.env.DEFAULT_ENGINE || 'anthropic').toLowerCase();
            const providers = [
              { key:'anthropic', ok:!!process.env.ANTHROPIC_API_KEY }, // prefer Claude
              { key:'openai',    ok:!!process.env.OPENAI_API_KEY },
              { key:'google',    ok:!!process.env.GOOGLE_API_KEY },
              { key:'groq',      ok:!!process.env.GROQ_API_KEY },
            ];
            const chosen = providers.some(p=>p.key===req && p.ok)
              ? req
              : (providers.find(p=>p.ok)?.key || 'openai');
            core.info(`Chosen provider: ${chosen}`);
            core.setOutput('engine', chosen);


      - name: Collect changed files
        id: files
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const pull_number = Number('${{ steps.pr.outputs.number }}');
            const files = await github.paginate(
              github.rest.pulls.listFiles,
              { owner, repo, pull_number, per_page: 100 }
            );
            const summary = files.map(f => `- ${f.filename} (${f.status}) +${f.additions} -${f.deletions}`).join('\n');
            core.setOutput('files', JSON.stringify(files));
            core.setOutput('summary', summary);

      - name: Save changed files list
        run: echo '${{ steps.files.outputs.files }}' > files.json

      # ---- Policy-based score (smart) ----
      - name: Read PR labels
        id: prlabels
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const number = Number('${{ steps.pr.outputs.number }}');
            const { data: labels } = await github.rest.issues.listLabelsOnIssue({ owner, repo, issue_number: number });
            const names = labels.map(l => l.name);
            core.setOutput('names', JSON.stringify(names));

      - name: Compute score (policy)
        id: score
        shell: bash
        run: |
          set -e
          FILES_JSON='${{ steps.files.outputs.files }}'
          echo "$FILES_JSON" > files.json

          # ------------- Policy knobs -------------
          BASE=90
          MINOR_DIFF_CUTOFF=300
          LARGE_DIFF_CUTOFF=1000

          SENSITIVE_REGEX='^(\.github/workflows/|\.github/actions/|\.github/.*\.yml$|(^|/)\.env(\.|$)|^secrets?/|^Dockerfile$|^docker-compose\.ya?ml$|^render\.ya?ml$|^vercel\.json$|^supabase/migrations/|^supabase/.*\.sql$|\.sql$|^rocketgpt-agents/runners/|^infra/|^deploy/|^k8s/|^helm/)'
          LOCKS_REGEX='(^|/)(package-lock\.json|pnpm-lock\.yaml|yarn\.lock)$'
          ALLOW=$(echo '${{ steps.prlabels.outputs.names }}' | jq -r 'index("ai:unsafe-ok") | if . == null then "no" else "yes" end')

          TOTAL_ADD=$(jq '[.[].additions] | add // 0' files.json)
          TOTAL_DEL=$(jq '[.[].deletions] | add // 0' files.json)
          TOTAL_CHG=$(( TOTAL_ADD + TOTAL_DEL ))

          HAS_SENSITIVE=$(jq --arg re "$SENSITIVE_REGEX" '[ .[] | select(.filename|test($re)) ] | length' files.json)
          HAS_LOCKS=$(jq --arg re "$LOCKS_REGEX"     '[ .[] | select(.filename|test($re)) ] | length' files.json)

          SCORE=$BASE

          if [ "$HAS_SENSITIVE" -gt 0 ] && [ "$ALLOW" != "yes" ]; then
            SCORE=0
          else
            if [ "$TOTAL_CHG" -gt "$LARGE_DIFF_CUTOFF" ]; then
              SCORE=$(( SCORE - 40 ))
            elif [ "$TOTAL_CHG" -gt "$MINOR_DIFF_CUTOFF" ]; then
              SCORE=$(( SCORE - 20 ))
            fi
            if [ "$HAS_LOCKS" -gt 0 ]; then
              SCORE=$(( SCORE - 10 ))
            fi
            if [ "$TOTAL_DEL" -gt $(( TOTAL_ADD * 3 )) ]; then
              SCORE=$(( SCORE - 15 ))
            fi
            [ "$SCORE" -lt 0 ] && SCORE=0
            [ "$SCORE" -gt 100 ] && SCORE=100
          fi

          echo "TOTAL_ADD=$TOTAL_ADD  TOTAL_DEL=$TOTAL_DEL  TOTAL_CHG=$TOTAL_CHG"
          echo "HAS_SENSITIVE=$HAS_SENSITIVE  HAS_LOCKS=$HAS_LOCKS  ALLOW=${ALLOW}"
          echo "score=$SCORE" | tee -a "$GITHUB_OUTPUT"

      # ---- Build review input safely ----
- name: Build review_input.json
  run: |
    cat > review_input.json <<'JSON'
    {
      "pr": {
        "number": ${{ steps.pr.outputs.number }},
        "title": "${{ github.event.pull_request.title || '' }}",
        "author": "${{ github.event.pull_request.user.login || github.actor }}",
        "base": "${{ github.event.pull_request.base.ref || '' }}",
        "head": "${{ github.event.pull_request.head.ref || '' }}"
      },
      "repo": "${{ github.repository }}",
      "summary": "${{ steps.files.outputs.summary || '' }}",
      "files": ${{ steps.files.outputs.files || '[]' }},
      "score": ${{ steps.score.outputs.score || 60 }},
      "min_accept_score": ${{ env.MIN_ACCEPT_SCORE || 75 }},
      "provider_hint": "${{ steps.engine.outputs.engine || 'unknown' }}"
    }
    JSON
    echo "Created review_input.json:" && cat review_input.json


      - name: Run AI review (runner -> review_result.json)
        env:
          MODEL_PROVIDER: ${{ steps.engine.outputs.engine }}
        run: |
          node rocketgpt-agents/runners/github_actions.js review review_input.json
          test -f review_result.json || (echo "review_result.json missing"; exit 1)
          echo "AI review produced:" && cat review_result.json

      - name: Read decision
        id: rr
        run: echo "decision=$(jq -r '.decision' review_result.json)" >> $GITHUB_OUTPUT

      # --- Post comment (no approval) ---
      - name: Post AI review as PR comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const r = JSON.parse(fs.readFileSync('review_result.json','utf8'));
            const {owner, repo} = context.repo;
            const pull_number = Number('${{ steps.pr.outputs.number }}');
            const body = `${r.summary_md}\n\n${r.nitpicks_md ? '---\n' + r.nitpicks_md : ''}`;
            await github.rest.issues.createComment({ owner, repo, issue_number: pull_number, body });

      # --- Create the "AI Review" check run ---
      - name: Create/Update "AI Review" check run
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const r = JSON.parse(fs.readFileSync('review_result.json','utf8'));
            const {owner, repo} = context.repo;
            const prNumber = Number('${{ steps.pr.outputs.number }}');
            const { data: pr } = await github.rest.pulls.get({ owner, repo, pull_number: prNumber });

            let conclusion = 'neutral';
            if (r.decision === 'approve') conclusion = 'success';
            else if (r.decision === 'block') conclusion = 'failure';

            await github.request('POST /repos/{owner}/{repo}/check-runs', {
              owner, repo,
              name: 'AI Review',
              head_sha: pr.head.sha,
              status: 'completed',
              conclusion,
              output: {
                title: 'AI Review',
                summary: r.summary_md,
                text: r.nitpicks_md || ''
              }
            });
            core.setOutput('conclusion', conclusion);

      - name: Label PR with AI review status
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const prNumber = Number('${{ steps.pr.outputs.number }}');
            const conclusion = '${{ steps.check.outputs.conclusion }}';
            const add = ['ai:reviewed'];
            if (conclusion === 'success') add.push('ai:approved');
            await github.rest.issues.addLabels({ owner, repo, issue_number: prNumber, labels: add });

      - name: Save review I/O artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: review-artifacts-${{ github.run_id }}
          path: |
            event.json
            files.json
            review_input.json
            review_result.json

      # ➡ Dispatch merge if AI check succeeded
      - name: Trigger Auto-Merge (log req/resp)
        if: ${{ steps.check.outputs.conclusion == 'success' }}
        env:
          OWNER:  ${{ github.repository_owner }}
          REPO:   ${{ github.event.repository.name }}
          PR:     ${{ steps.pr.outputs.number }}
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          set -euo pipefail
          echo "::group::Dispatch Merge Request"
          PAYLOAD=$(jq -n --argjson n "$PR" '{event_type:"merge", client_payload:{pr_number:$n}}')
          echo "$PAYLOAD" | jq -C .
          echo "$PAYLOAD" > dispatch.merge.req.json
          echo "::endgroup::"

          STATUS=$(curl -s -o dispatch.merge.resp.json -w "%{http_code}" \
            -X POST -H "Authorization: token ${GH_PAT}" -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${OWNER}/${REPO}/dispatches" \
            -d "$PAYLOAD")

          echo "::group::Dispatch Merge Response"
          echo "HTTP: $STATUS"
          jq -C '.' dispatch.merge.resp.json || cat dispatch.merge.resp.json
          echo "::endgroup::"
          test "${STATUS}" = "204" || (echo "ERR: merge dispatch failed"; exit 1)

      - name: Save merge dispatch artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: review-dispatch-${{ github.run_id }}
          path: |
            dispatch.merge.req.json
            dispatch.merge.resp.json
