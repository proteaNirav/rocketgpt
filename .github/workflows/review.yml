name: RocketGPT Review Pipeline

on:
  pull_request:
    branches: [ main, dev ]
  repository_dispatch:
    types: [review] # allows Codegen to explicitly trigger review

permissions:
  contents: read
  pull-requests: write   # needed to post a PR review comment

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  MIN_ACCEPT_SCORE: 75

jobs:
  ai-review:
    name: AI Review
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      # 1Ô∏è‚É£ Determine PR number (works for PR + dispatch)
      - name: Determine PR number
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            let prNumber = null;
            if (context.eventName === 'pull_request') {
              prNumber = context.payload.pull_request.number;
            } else if (context.eventName === 'repository_dispatch') {
              prNumber = context.payload.client_payload?.pr_number ?? null;
            }
            if (!prNumber) {
              core.setFailed('PR number not found in event payload.');
            } else {
              core.setOutput('number', prNumber);
            }

      # 2Ô∏è‚É£ Validate runner
      - name: Validate runner exists
        run: |
          test -f rocketgpt-agents/runners/github_actions.js || \
            (echo "Missing runner: rocketgpt-agents/runners/github_actions.js"; exit 1)

      # 3Ô∏è‚É£ Pick model provider
      - name: Pick model provider
        id: engine
        uses: actions/github-script@v7
        env:
          DEFAULT_ENGINE: openai
          OPENAI_API_KEY:     ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY:  ${{ secrets.ANTHROPIC_API_KEY }}
          GOOGLE_API_KEY:     ${{ secrets.GOOGLE_API_KEY }}
          GROQ_API_KEY:       ${{ secrets.GROQ_API_KEY }}
        with:
          script: |
            const req = (process.env.DEFAULT_ENGINE || 'openai').toLowerCase();
            const providers = [
              { key:'openai', ok:!!process.env.OPENAI_API_KEY },
              { key:'anthropic', ok:!!process.env.ANTHROPIC_API_KEY },
              { key:'google', ok:!!process.env.GOOGLE_API_KEY },
              { key:'groq', ok:!!process.env.GROQ_API_KEY },
            ];
            const chosen = providers.some(p=>p.key===req && p.ok)
              ? req
              : (providers.find(p=>p.ok)?.key || 'openai');
            core.info(`Chosen provider: ${chosen}`);
            core.setOutput('engine', chosen);

      # 4Ô∏è‚É£ Collect changed files
      - name: Collect changed files
        id: files
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const pull_number = Number('${{ steps.pr.outputs.number }}');
            const files = await github.paginate(
              github.rest.pulls.listFiles,
              { owner, repo, pull_number, per_page: 100 }
            );
            const summary = files.map(f => `- ${f.filename} (${f.status}) +${f.additions} -${f.deletions}`).join('\n');
            core.setOutput('files', JSON.stringify(files));
            core.setOutput('summary', summary);

      # 5Ô∏è‚É£ Compute placeholder score
      - name: Compute score
        id: score
        run: echo "score=60" >> $GITHUB_OUTPUT

      # 6Ô∏è‚É£ Build review_input.json safely
      - name: Build review_input.json
        run: |
          cat > review_input.json <<'JSON'
          {
            "pr": {
              "number": ${{ steps.pr.outputs.number }},
              "title": "${{ github.event.pull_request.title || '' }}",
              "author": "${{ github.event.pull_request.user.login || github.actor }}",
              "base": "${{ github.event.pull_request.base.ref || '' }}",
              "head": "${{ github.event.pull_request.head.ref || '' }}"
            },
            "repo": "${{ github.repository }}",
            "summary": "${{ steps.files.outputs.summary || '' }}",
            "files": ${{ steps.files.outputs.files || '[]' }},
            "score": ${{ steps.score.outputs.score || 60 }},
            "min_accept_score": ${{ env.MIN_ACCEPT_SCORE || 75 }},
            "provider_hint": "${{ steps.engine.outputs.engine || 'unknown' }}"
          }
          JSON
          echo "Created review_input.json:"
          cat review_input.json

      # 7Ô∏è‚É£ Run the local review runner
      - name: Run AI review (runner -> review_result.json)
        env:
          MODEL_PROVIDER: ${{ steps.engine.outputs.engine }}
        run: |
          node rocketgpt-agents/runners/github_actions.js review review_input.json
          test -f review_result.json || (echo "review_result.json missing"; exit 1)
          echo "AI review produced:"
          cat review_result.json

      # 8Ô∏è‚É£ Read decision
      - name: Read decision
        id: rr
        run: echo "decision=$(jq -r '.decision' review_result.json)" >> $GITHUB_OUTPUT

      # 9Ô∏è‚É£ Post review on PR
      - name: Post review on PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const r = JSON.parse(fs.readFileSync('review_result.json','utf8'));
            const {owner, repo} = context.repo;
            const pull_number = Number('${{ steps.pr.outputs.number }}');
            let event = 'COMMENT';
            if (r.decision === 'approve') event = 'APPROVE';
            if (r.decision === 'block') event = 'REQUEST_CHANGES';
            await github.rest.pulls.createReview({
              owner, repo, pull_number, event,
              body: `${r.summary_md}\n\n${r.nitpicks_md ? '---\n' + r.nitpicks_md : ''}`
            });

      # üîÅ Auto-dispatch merge if approved
      - name: Trigger Auto-Merge
        if: ${{ steps.rr.outputs.decision == 'approve' }}
        env:
          OWNER:  ${{ github.repository_owner }}
          REPO:   ${{ github.event.repository.name }}
          PR:     ${{ steps.pr.outputs.number }}
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          set -e
          [ -n "$GH_PAT" ] || { echo "GH_PAT missing"; exit 1; }
          echo "Dispatching merge for PR #${PR}"
          STATUS=$(curl -s -o /tmp/resp.json -w "%{http_code}" \
            -X POST \
            -H "Authorization: token ${GH_PAT}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${OWNER}/${REPO}/dispatches \
            -d "{\"event_type\":\"merge\",\"client_payload\":{\"pr_number\":${PR}}}" )
          echo "Dispatch HTTP ${STATUS}"
          cat /tmp/resp.json || true
          test "${STATUS}" = "204" || (echo "ERR: dispatch failed"; exit 1)
