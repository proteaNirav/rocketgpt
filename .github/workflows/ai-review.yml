name: AI Pull Request Review

on:
  pull_request:
    types: [opened, reopened, ready_for_review, synchronize]

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: ai-review-pr-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  review:
    if: ${{ !github.event.pull_request.draft }} # skip drafts
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Decide which model provider to use for the reviewer.
      # Set a repo variable "DEFAULT_ENGINE" = openai|anthropic|google|groq (optional).
      - name: Resolve engine
        id: engine
        uses: actions/github-script@v7
        env:
          DEFAULT_ENGINE: ${{ vars.DEFAULT_ENGINE }}
        with:
          script: |
            const engine = (process.env.DEFAULT_ENGINE || 'openai').toLowerCase();
            core.setOutput('engine', engine);

      - name: Collect changed files / summary
        id: diff
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo, number} = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              number: context.payload.pull_request.number
            };

            const files = await github.paginate(
              github.rest.pulls.listFiles,
              { owner, repo, pull_number: number, per_page: 100 }
            );

            // A short textual diff summary for the reviewer LLM
            const summary = files.map(f =>
              `- ${f.filename} (${f.status}) +${f.additions} -${f.deletions}`
            ).join('\n');

            core.setOutput('files', JSON.stringify(files));
            core.setOutput('summary', summary);

      - name: Prepare review input
        run: |
          cat > review_input.json << 'JSON'
          {
            "pr": {
              "number": ${{ github.event.pull_request.number }},
              "title": "${{ github.event.pull_request.title }}",
              "author": "${{ github.event.pull_request.user.login }}",
              "base": "${{ github.event.pull_request.base.ref }}",
              "head": "${{ github.event.pull_request.head.ref }}"
            },
            "repo": "${{ github.repository }}",
            "summary": ${{ toJson(steps.diff.outputs.summary) }},
            "files": ${{ steps.diff.outputs.files }}
          }
          JSON
          echo "Prepared review_input.json"

      - name: Run AI reviewer (analysis â†’ findings â†’ verdict)
        env:
          MODEL_PROVIDER:    ${{ steps.engine.outputs.engine }}
          OPENAI_API_KEY:    ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GOOGLE_API_KEY:    ${{ secrets.GOOGLE_API_KEY }}
          GROQ_API_KEY:      ${{ secrets.GROQ_API_KEY }}
        run: |
          # Your reviewer should read review_input.json and write review_result.json:
          # {
          #   "decision": "approve" | "comment" | "block",
          #   "summary_md": "markdown bullets and risks",
          #   "nitpicks_md": "- item 1\n- item 2"
          # }
          node rocketgpt-agents/runners/github_actions.js review review_input.json

          test -f review_result.json || (echo "review_result.json missing"; exit 1)
          echo "AI review produced:"
          cat review_result.json

      - name: Post GitHub Review & labels
        uses: actions/github-script@v7
        with:
          script: |
            const result = require(process.cwd() + '/review_result.json');

            // Map AI decision to GitHub review event
            const eventMap = { approve: 'APPROVE', block: 'REQUEST_CHANGES', comment: 'COMMENT' };
            const event = eventMap[(result.decision || 'comment').toLowerCase()] || 'COMMENT';

            const body =
              `### ğŸ¤– AI Review (engine: ${process.env.ENGINE})\n\n` +
              (result.summary_md || '*No summary provided.*') +
              (result.nitpicks_md ? `\n\n#### Nitpicks\n${result.nitpicks_md}` : '');

            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const pull_number = context.payload.pull_request.number;

            // Submit review
            await github.rest.pulls.createReview({
              owner, repo, pull_number, body, event
            });

            // Ensure "ai:reviewed" label is present
            try {
              await github.rest.issues.addLabels({ owner, repo, issue_number: pull_number, labels: ['ai:reviewed'] });
            } catch (e) { /* ignore */ }

            // If approved, also mark for auto-merge
            if (event === 'APPROVE') {
              try {
                await github.rest.issues.addLabels({
                  owner, repo, issue_number: pull_number, labels: ['auto-merge:ready']
                });
              } catch (e) { /* ignore */ }
            }
        env:
          ENGINE: ${{ steps.engine.outputs.engine }}
