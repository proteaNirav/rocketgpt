name: AI PR Review

on:
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]
    branches: [ main, dev ]

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: ai-review-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - name: Check keys (skip if missing)
        id: gate
        run: |
          missing=0
          if [ -z "${{ secrets.OPENAI_API_KEY }}" ]; then missing=$((missing+1)); fi
          echo "missing=$missing" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v4

      - name: Collect PR diff (summary)
        id: diff
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const files = await github.paginate(github.rest.pulls.listFiles, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number,
              per_page: 100
            });
            const changed = files.map(f => `â€¢ ${f.filename} (+${f.additions}/-${f.deletions})`).join('\n');
            const patchSample = files.slice(0, 10).map(f => {
              const p = (f.patch || '').split('\n').slice(0, 200).join('\n');
              return `# ${f.filename}\n${p}`;
            }).join('\n\n-----\n\n');
            core.setOutput('changed', changed || 'No changes?');
            core.setOutput('patch', patchSample || 'No patch?');

      - name: Run AI review
        if: steps.gate.outputs.missing == '0'
        id: ai
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          TITLE: ${{ github.event.pull_request.title }}
          AUTHOR: ${{ github.event.pull_request.user.login }}
          CHANGED: ${{ steps.diff.outputs.changed }}
          PATCH: ${{ steps.diff.outputs.patch }}
        run: |
          cat > prompt.txt << 'EOF'
          You are a senior code reviewer. Provide a concise, actionable review.
          1) Start with an overall verdict (OK / Minor issues / Blocking issues).
          2) List specific findings as bullets, each with: Area, Risk, Action.
          3) Include a short security pass (secrets, injections, unsafe I/O).
          4) Include a short testing pass (what to test; gaps).
          Keep it under 300-400 words. Be specific and practical.
          Context:
          - Title: ${TITLE}
          - Author: ${AUTHOR}
          - Changes:
          ${CHANGED}

          Patch (truncated):
          ${PATCH}
          EOF

          # Call OpenAI (gpt-4o-mini as default; change if needed)
          REVIEW=$(curl -sS https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer ${OPENAI_API_KEY}" \
            -H "Content-Type: application/json" \
            -d @- <<'JSON' | jq -r '.choices[0].message.content'
          {
            "model": "gpt-4o-mini",
            "messages": [
              {"role":"system","content":"You are an expert code reviewer."},
              {"role":"user","content": "'"$(sed 's/\\/\\\\/g; s/"/\\"/g' prompt.txt)"'"}
            ],
            "temperature": 0.2
          }
          JSON
          )
          echo "$REVIEW" > review.md
          echo "review=$(printf '%q' "$REVIEW")" >> $GITHUB_OUTPUT

      - name: Post review comment
        if: steps.gate.outputs.missing == '0'
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const fs = require('fs');
            const body = fs.readFileSync('review.md', 'utf8');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: `### ðŸ¤– AI Review\n\n${body}`
            })

      - name: Note missing key (soft)
        if: steps.gate.outputs.missing != '0'
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: "AI Review skipped: `OPENAI_API_KEY` not configured."
            })
