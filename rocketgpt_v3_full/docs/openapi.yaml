openapi: 3.1.0
info:
  title: RocketGPT Core API
  version: 1.0.0
servers:
  - url: https://api.rocketgpt.dev
paths:
  /plan:
    post:
      summary: Generate a plain‑English plan from a user goal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlanRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanResponse'
  /recommend:
    post:
      summary: Recommend 1–3 tools with cost/time estimates
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecommendRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecommendResponse'
  /estimate:
    post:
      summary: Estimate cost/time/steps for a proposed path
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EstimateRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EstimateResponse'
components:
  schemas:
    Message:
      type: object
      properties:
        role: { type: string, enum: [user, assistant, system] }
        content: { type: string }
        attachments:
          type: array
          items:
            type: object
            properties:
              type: { type: string, enum: [file, image, url] }
              name: { type: string }
              url: { type: string }
    Step:
      type: object
      properties:
        id: { type: string }
        title: { type: string }
        detail: { type: string }
        status: { type: string, enum: [pending, running, done, skipped, failed], default: pending }
    Estimates:
      type: object
      properties:
        costINR: { type: number }
        minutes: { type: integer }
        steps: { type: integer }
        confidence: { type: number, minimum: 0, maximum: 1 }
        assumptions: { type: array, items: { type: string } }
    Decision:
      type: object
      properties:
        summary: { type: string }
        toolId: { type: string, nullable: true }
        estimates: { $ref: '#/components/schemas/Estimates' }
    Recommendation:
      type: object
      properties:
        toolId: { type: string }
        title: { type: string }
        why: { type: string }
        avoidWhen: { type: string }
        estimates: { $ref: '#/components/schemas/Estimates' }
        actions:
          type: array
          items:
            type: object
            properties:
              type: { type: string, enum: [run, open, copy] }
              params: { type: object, additionalProperties: true }
        badges:
          type: object
          properties:
            reliability: { type: number, minimum: 0, maximum: 1 }
            pricing: { type: string, enum: [free, freemium, paid] }
    PlanRequest:
      type: object
      required: [goal]
      properties:
        goal: { type: string }
        context:
          type: object
          properties:
            domain: { type: string }
            persona: { type: string }
            constraints: { type: array, items: { type: string } }
            preferences: { type: array, items: { type: string } }
        history: { type: array, items: { $ref: '#/components/schemas/Message' } }
    PlanResponse:
      type: object
      properties:
        plan: { type: array, items: { $ref: '#/components/schemas/Step' } }
        decision: { $ref: '#/components/schemas/Decision' }
    RecommendRequest:
      type: object
      required: [goal]
      properties:
        goal: { type: string }
        plan: { type: array, items: { $ref: '#/components/schemas/Step' } }
        preferences:
          type: object
          properties:
            optimize: { type: string, enum: [cheapest, fastest, balanced], default: balanced }
            maxCostINR: { type: number, nullable: true }
            localOnly: { type: boolean, default: false }
    RecommendResponse:
      type: object
      properties:
        decision: { $ref: '#/components/schemas/Decision' }
        recommendations: { type: array, items: { $ref: '#/components/schemas/Recommendation' } }
    EstimateRequest:
      type: object
      required: [path]
      properties:
        path:
          type: object
          properties:
            toolId: { type: string }
            template: { type: string }
            steps: { type: array, items: { $ref: '#/components/schemas/Step' } }
            inputs: { type: object, additionalProperties: true }
    EstimateResponse:
      type: object
      properties:
        estimates: { $ref: '#/components/schemas/Estimates' }
        breakdown:
          type: array
          items:
            type: object
            properties:
              stepId: { type: string }
              minutes: { type: integer }
              costINR: { type: number }
